plugins {
    id 'fabric-loom'
    id "org.jetbrains.kotlin.jvm"
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.71'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {}

configurations {
    embed
    implementation.extendsFrom(embed)
}

repositories {
    jcenter()
    mavenCentral()
    maven { url = "http://maven.fabricmc.net/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    implementation "com.mojang:brigadier:$brigadier_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
    embed "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
}

processResources {
    inputs.property "version", project.version
    from configurations.embed.collect {
        if (it.name == "kotlinx-serialization-runtime-0.20.0.jar") {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"; expand "version": project.version
    }
    from(sourceSets.main.resources.srcDirs) { exclude "fabric.mod.json" }
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar { from "LICENSE" }

compileKotlin.kotlinOptions.jvmTarget = "1.8"
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    }
}
