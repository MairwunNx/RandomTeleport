buildscript {
    repositories {
        maven { url("https://libraries.minecraft.net") }
        maven { url("https://plugins.gradle.org/m2/") }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath(
            "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        )
        classpath(
            "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        )
    }
}

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
}

apply(plugin: "kotlinx-serialization")

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

configurations {
    embed
    compile.extendsFrom(embed)
}

repositories {
    jcenter()
    mavenCentral()
    maven { url = "http://maven.fabricmc.net/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    compile(group: "com.mojang", name: "brigadier", version: brigadier_version)
    compile(
        group: "org.jetbrains.kotlinx",
        name: "kotlinx-serialization-runtime",
        version: kotlinx_serialization_version
    )
    embed(
        group: "org.jetbrains.kotlinx",
        name: "kotlinx-serialization-runtime",
        version: kotlinx_serialization_version
    )
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from configurations.embed.collect {
        System.out.println(it.name)
        if (it.name != "kotlin-stdlib-1.3.61.jar" &&
            it.name != "kotlin-stdlib-common-1.3.61.jar"
        ) {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"
